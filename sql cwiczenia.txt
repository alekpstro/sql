--DOM

--Id_domu

--Miasto

--Ulica

--Metraz

--Cena_proponowana

create table DOM 

(id_domu numeric(5) primary key,

miasto varchar(30) not null,

ulica varchar(30),

metraz numeric(5,2), -- 123,34

cena_proponowana numeric(9,2))



--KLIENT

--Id_klienta

--Imie

--Nazwisko

--Miasto

--Ulica

create table Klient

(id_klienta numeric(5) primary key,

imie varchar(30) not null,

nazwisko varchar(30) not null,

miasto varchar(30) not null,

ulica varchar(30))



--TRANSAKCJE

--ID_transakcji

--ID_domu

--ID_klienta

--Cena_uzyskana

--Data_transakcji



create table Transakcje

(id_transakcji numeric(5) identity(1,1) primary key,

id_domu numeric(5) foreign key (id_domu) references dom(id_domu),

id_klienta numeric(5) foreign key (id_klienta) references klient(id_klienta),

cena_uzyskana numeric(9,2),

data_transakcji date default getdate()) --'RRRR-MM-DD'



--2. Wypełnić tabele danymi (po 5 wierszy).

insert into dom values

(1,'Gdańsk','Miszewskiego 5',120.5,300000.50),
(2,'Sopot','Grunwaldzka 12',85.75,580000),
(3,'Gdynia','Krasickiego 12',150.25,400000),
(4,'Gdańsk','Grunwaldzka 211',200,500000),
(5,'Gdynia','Świętojańska 1',30,null);

insert into klient values
(1,'Jan','Kowalski','Gdańsk','Miszewskiego 5'),
(2,'Anna','Nowak','Wejherowo','Gdańska 5'),
(3,'Adam','Malinowski','Gdańsk','Kołobrzeska 25B/2'),
(4,'Ewa','Woźniak','Kraków','Wawelska 5'),
(5,'Julia','Wiśniewska','Warszawa','Aleje Jerozolomiskie 555/2')

insert into transakcje (id_domu,id_klienta,cena_uzyskana,data_transakcji)
values
(4,1,480000,'2019-09-20'),
(3,5,398000,'2019-08-04'),
(2,4,600000,'2019-07-24')

--30. Wyświetlić tylko te transakcje, których różnica pomiędzy ceną uzyskaną a proponowaną jest większa od 0.
select * from Transakcje t , Dom d where t.id_transakcji=d.id_domu and cena_proponowana!=cena_uzyskana 


select t.cena_uzyskana-d.cena_proponowana as 'różnica'
from Transakcje t , Dom d 
where t.id_domu=d.id_domu
and t.cena_uzyskana-d.cena_proponowana>0

--31. Wyświetlić wartość w miesiącach, jaka upłynęła pomiędzy transakcją a dzisiejszym dniem.

select *, datediff(MM, data_transakcji, getdate()) as 'liczba miesięcy'
from Transakcje

--32. Wyświetlić wartość liczbową prezentującą liczbę przeprowadzonych transakcji.

select count(*) as 'liczba transakcji' from Transakcje 

--33. Wyświetlić cenę proponowaną w wartościach tekstowych.

select cast(cena_proponowana as varchar(30))
as 'Liczba jako tekst'
from Dom

--34. Wyświetlić łączną wartość cen uzyskanych za dom.

select sum(cena_uzyskana) as 'Łączna cena '
from Transakcje

--35. Wyświetlić minimalną cenę uzyskaną za dom.

select min(cena_uzyskana) as 'Minimalna cena za dom'
from Transakcje

--36. Wyświetlić maksymalną cenę uzyskaną za dom.

select max(cena_uzyskana) as 'Max ceny uzyskanej'
from Transakcje

--37. Wyświetlić wszystkie nazwiska i ewentualnie daty transakcji oraz metraże sprzedanych domów,
--w przypadku, gdy transakcja sprzedaży miała miejsce.

select k.nazwisko, t.data_transakcji, d.metraz 
from klient k left join Transakcje t 
on k.id_klienta=t.id_klienta
left join Dom d on d.id_domu=t.id_domu

--right join- łączenie od prawej strony 
--left join - łączenie od lewej strony 
--inner join

--38. Wyświetlić wszystkie miasta, których dwie pierwsze litery są takie same.

select distinct  d1.miasto, d2.miasto 
from dom d1, dom d2
where left(d1.miasto,2)=left(d2.miasto,2)
and d1.miasto<d2.miasto

--39. Wyświetlić wszystkie domy, których metraż jest większy od największego metrażu w Sopocie.

select * from dom
where metraz>
(select max(metraz) from dom where miasto = 'Sopot')

--40. Wyświetlić wszystkie domy wraz z nazwiskami klientów, którzy kupili co najmniej dwa domy.

select d.*, k.nazwisko, k.imie
from Dom d, Klient k, Transakcje t 
where t.id_domu=k.id_klienta
and t.id_klienta=k.id_klienta
and k.id_klienta in 
(select k.id_klienta from Klient k, Transakcje t 
where t.id_klienta=k.id_klienta
group by k.id_klienta having count(*)>=2)

--41. Wyświetlić wszystkie nazwy klientów oraz domy klientów, którzy kupili dokładnie dwa domy.

select d.*, k.nazwisko, k.imie
from Dom d, Klient k, Transakcje t 
where t.id_domu=k.id_klienta
and t.id_klienta=k.id_klienta
and k.id_klienta in 
(select k.id_klienta from Klient k, Transakcje t 
where t.id_klienta=k.id_klienta
group by k.id_klienta having count(*)=2)

--42. Wyświetlić wszystkie transakcje, w których cena uzyskana była wyższa niż średnia.

select * from Transakcje 
where cena_uzyskana>
(select avg(cena_uzyskana) from Transakcje )

--43. Wyświetlić wszystkie domy, które były w sprzedaży zanim dodany został dom w Sopocie.

select * from Dom
where id_domu<
(select id_domu from Dom where miasto = 'Sopot')

--44. Wyświetlić dni tygodnia wszystkich zawartych transakcji.

select data_transakcji, datename(dw,data_transakcji) 
as 'Dzień  tygodnia '
from Transakcje 

--dd- dzien miesiąca
--yyyy- rok
--month/MM- miesiąc

--45. Wyświetlić identyfikatory i dni tygodnia dla transakcji w miastach w których sprzedano co najmniej 3 domy.

select id_transakcji, datename(dw,data_transakcji) as 'Dzień tygodnia '
from Transakcje t, dom d
where t.id_domu=d.id_domu
and d.miasto in
(select miasto from dom d , Transakcje t
where d.id_domu=t.id_domu
group by miasto having count(*)>=3)

--46. Wyświetlić wszystkie nazwiska klientów i ewentualnie nazwy miast i ulic, gdzie pierwsza litera ulicy jest równa pierwszej literze miasta.



--47. Wyświetlić w jednej kolumnie miesiące, a w drugiej liczby transakcji przeprowadzonych w tym czasie.





-----------------------------------------------------------------------------------------------------------------

--44. Wyświetlić dni tygodnia wszystkich zawartych transakcji.

select data_transakcji, datename(dw,data_transakcji) 
as 'Dzień  tygodnia '
from Transakcje 

--dd- dzien miesiąca
--yyyy- rok
--month/MM- miesiąc

--45. Wyświetlić identyfikatory i dni tygodnia dla transakcji w miastach w których sprzedano co najmniej 3 domy.

select id_transakcji, datename(dw,data_transakcji) as 'Dzień tygodnia '
from Transakcje t, dom d
where t.id_domu=d.id_domu
and d.miasto in
(select miasto from dom d , Transakcje t
where d.id_domu=t.id_domu
group by miasto having count(*)>=3)

--46. Wyświetlić wszystkie nazwiska klientów i ewentualnie nazwy miast i ulic, gdzie pierwsza litera ulicy jest równa pierwszej literze miasta.
select k1.nazwisko ,k2.ulica , k1.ulica  
from Klient k1 left join klient k2
on k1.id_klienta=k2.id_klienta
and left(k2.ulica,1)=left(k2.miasto,1)


--47. Wyświetlić w jednej kolumnie miesiące, a w drugiej liczby transakcji przeprowadzonych w tym czasie.

select DATENAME(mm,data_transakcji) as 'Miesiąc transakcji',
count (*) as 'liczba transakcji'
from Transakcje
group by DATENAME(mm,data_transakcji)

--48. Zakładając, że prowizja w 2021 roku wynosi 1,55%, wyświetlić wszystkie ceny uzyskane za domy bez tej prowizji, których sprzedaż miała miejsce w 2021 roku.

select cena_uzyskana*0.9845 as 'Cena bez prowizji'
from Transakcje 
where year(data_transakcji)=2021


--49. Wyświetlić wszystkie 5 literowe nazwiska, których 1 litera jest równa 3 literze.

select * from Klient where len(nazwisko)=5
and left(nazwisko,1)=substring(nazwisko,3,1)

--50. Wyświetlić nazwiska trzech klientów, którzy przeprowadzili jakiekolwiek transakcje zakupu domu jako pierwsi.

select top 3  imie, nazwisko from Transakcje, Klient
where Klient.id_klienta=Transakcje.id_klienta
order by data_transakcji asc

--51. Wyświetlić wszystkie identyfikatory domów oraz ewentualnie ich miasta w przypadku, gdy cena proponowana metra kwadratowego przekracza 5000 zł.

select d1.id_domu , d2.miasto 
from DOM d1 left join Dom d2
on d1.id_domu=d2.id_domu
and d2.cena_proponowana/d2.metraz>5000


--52. Wyświetlić nazwiska kończące się na „ski” dla wszystkich klientów, którzy kupili co najmniej 1 dom.

select nazwisko, imie from Klient k,  Transakcje t 
where k.id_klienta=t.id_transakcji
and k.nazwisko like '%ski'

--53. Zwiększyć cenę proponowaną domów o 5%.

update DOM set cena_proponowana*=1.05

--54. Obniżyć cenę proponowaną domu o najwyższej cenie o 5000 zł.

update Dom set cena_proponowana-=5000 
where cena_proponowana=
(select max(cena_proponowana) from DOM)

--55. Obniżyć o 10% ceny wszystkich niesprzedanych domów.

update DOM set cena_proponowana*=0.9
where id_domu not in (select id_domu from Transakcje)


--56. Usunąć wszystkich klientów, których nazwiska zaczynają się na literę „A”.
-- delete usówa wiersze 
delete from Klient where nazwisko like 'A%'

--57. Usunąć z oferty wszystkie domy, które nie zostały sprzedane.
delete from DOM where id_domu not in (select id_domu from Transakcje)

--58. Utworzyć widok dla wszystkich klientów, którzy nie nabyli jeszcze domu.

go--rozdziela nowe query
create view zadanie58 as 
select * from Klient 
where id_klienta not in
(select id_klienta from Transakcje )

--59. Zwiększyć identyfikatory klientów, którzy nie nabyli domu o 100.

update zadanie58 set id_klienta+=100

select * from zadanie58

--60. Dodać dwa nowe domy.
 
select * from DOM
insert into DOM (id_domu,miasto,ulica) values
(6,'Sopot','Nowa 10')




---------------------------------------------------------------------------------------------------------------
t into cdk values (3, 30, 'lecture room');

insert into cdk values (4, 120, 'lecture room');

insert into cdk values (5, 30, 'lecture room');

insert into cdk values (6, 30, 'lecture room');

insert into cdk values (7, 30, 'lecture room');

insert into cdk values (9, 400, 'auditorium');

insert into cdk values (23, 13, 'computer laboratory');

insert into cdk values (24, 29, 'computer laboratory');

insert into cdk values (25, 29, 'computer laboratory');

insert into cdk values (34, 10, 'media room');

insert into cdk values (36, 31, 'computer laboratory');

 

go

create table wz (room_number numeric(5) primary key, capacity numeric(3), room_type varchar(30));

go

insert into wz values (307, 70, 'lecture room');

insert into wz values (310, 30, 'lecture room');

insert into wz values (311, 30, 'lecture room');

insert into wz values (1, 200, 'auditorium');

insert into wz values (23, 13, 'computer laboratory');

insert into wz values (119, 29, 'computer laboratory');

insert into wz values (118, 29, 'computer laboratory');

insert into wz values (238, 31, 'computer laboratory');

go

 

CREATE TABLE building (

   id numeric(5) identity(1,1) primary key,

   name varchar(100) not null,

   city varchar(100),

   address varchar(100),

   floor_number numeric(1) ,

   room_number numeric(5) FOREIGN KEY (room_number) REFERENCES cdk(room_number));

   go

 insert into building(name,city,address,floor_number,room_number)  values ('CDK WZ UG','Sopot','Piaskowa 9',0,4)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',0,5)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',0,6)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',0,7)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',0,9)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',1,23)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',1,24)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',1,25)

 insert into building(name,city,address,floor_number,room_number) values ('CDK WZ UG','Sopot','Piaskowa 9',1,36)

 select * from cdk
 
 --zmienić w typie pokoju computer labolatory na labolatory
 update wz set room_type='laboratory'
 where room_type='computer laboratory'

 select distinct room_type from wz
 select distinct room_type from cdk

 --wstawic pokoj b2 do tabeli
 insert into wz values (2,40,'laboratory')

 select * from building

 --1. wyświetl nazwy wszystkich budynkó (new_name)
 --i liczbę miejsc w skali (capacity), dla sal które mają więcej niż 20 miejsc siedzących 
 --(capacity ) i są położone na pierwszym piętrze (floor)
 --dwie tabele building i cdk 

 select b.name as new_name, capacity as 'Capacity'
 from building b, cdk c
 where b.room_number=c.room_number
 and c.capacity>20
 and b.floor_number=1 

-- 2. Utwórz zapytanie z wykorzystaniem instrukcji CASE, które wyświetli numer sali (room number), 
--liczbę miejsc w sali (number of seats) i pojemność podzieloną na trzy kategorie:
--- więcej niż 100 studentów (capacity>100)
--- 50-100 studentów (capacity od 50 do 100)
--- mniej niż 50 studentów (capacity<50)
--Dla wszystkich sal z budynku CDK.

select room_number as 'room number', 
capacity as 'number of seats',
case
when capacity>100 then 'więcej niż sto studentów'
when capacity between 50 and 100 then '50-100 studentów'
when capacity<50 then 'mniej niż 50 studentów'
end as 'capacity of the room'
from cdk 

--3. Wyświetl wszystkie rodzaje sal poprzez wyświetlenie 
--jedynie trzech pierwszych liter kategorii sali
--tj.: lab, aud, lec (room_type) które znajdują się na pierwszym piętrze.

select distinct left(room_type,3) as room_type
from cdk, building
where cdk.room_number=building.room_number
and floor_number=1

select distinct left(room_type,3) as room_type
--substring(room_type,1,3)
from cdk join building
on cdk.room_number=building.room_number
and floor_number=1

--4. Wyświetl wszystkie numery sal w budynku CDK – 
--jeżeli numer sali w tabeli CDK jest taki sam jak w tabel WZ
--- wyświetl dodatkowo wszystkie informacje z tabeli WZ. 
select c.room_number , w.capacity, w.room_type

select c.room_number , isnull(cast(w.capacity as varchar(3)),'') as capacity,
isnull (w.room_type,'-')as room_type
from cdk c left join wz w 
on c.room_number=w.room_number


--5.  Wyświetl wszystkie numery sal w budynku WZ – 
--jeżeli numer sali w tabeli WZ jest taki sam jak w tabel CDK 
--- wyświetl dodatkowo wszystkie informacje z tabeli CDK.

select w.room_number, c.*
from wz w left join cdk c 
on w.room_number=c.room_number

--6. Jaki jest błąd w poniższym przykładzie i jak go naprawić? 
select b.room_number, room_type, address, city
from building b, cdk c
where b.room_number=c.room_number

